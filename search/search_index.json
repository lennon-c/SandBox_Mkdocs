{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sandbox for Mkdocs","text":"<p>Playground for testing options, plugins, formatting of:</p> <ul> <li>mkdocs</li> <li>mkdocs-material </li> <li>mkdocstrings-python</li> <li>markdown-exec[ansi]</li> <li>mkdocs-open-in-new-tab</li> <li>mkdocs-callouts (disabled, used to allow Obsidian syntax for callouts)</li> </ul> <p>Just a set of personal tests, to see what works and what does not. </p> <p>Showcased in this project's documentation</p>"},{"location":"#adding-python-exec-in-readme","title":"Adding python exec in Readme","text":"<p>I do not use an <code>index.md</code> file as the entry point for the website. Instead, I use a <code>README.md</code> file, which serves as both the homepage of the site and the documentation on GitHub, reducing boilerplate.</p> <p>However, some markup features are not supported when the <code>README.md</code> file is viewed directly on GitHub.</p> <p>For example, code execution does not work on GitHub:</p> <p>The following code block is displayed but not executed on GitHub, whereas it is executed on the documentation site.</p> <p>I am in README.md and in the Home page</p>"},{"location":"API/","title":"API","text":"<p>Customizations are done using CSS in the <code>docs/css/mkdocstrings.css</code> file.</p> <p>This is still a work in progress. So far, the customizations work on tablets and PCs, but not on mobile phones.</p>"},{"location":"API/#package","title":"Package","text":""},{"location":"API/#sandbox","title":"<code>sandbox</code>","text":"<p>Do math with your own functions.</p> <p>Modules exported by this package:</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from sand_pkg import calculations,  \n&gt;&gt;&gt; calculations.add(2, 4)\n6.0\n&gt;&gt;&gt; calculations.multiply(2.0, 4.0)\n8.0\n&gt;&gt;&gt; from calculator.calculations import divide\n&gt;&gt;&gt; divide(4.0, 2)\n2.0\n</code></pre> Note <p>In order to test the code, type:</p> <p><code>python -m doctest test.py</code></p> <p>Modules:</p> <ul> <li> <code>calculations</code>           \u2013            <p>Provide several sample math calculations.</p> </li> <li> <code>prints</code>           \u2013            </li> <li> <code>sandbox</code>           \u2013            <p>Module for testing anything.</p> </li> </ul>"},{"location":"API/calculations/","title":"Calculations","text":""},{"location":"API/calculations/#sandbox.calculations","title":"<code>sandbox.calculations</code>","text":"<p>Provide several sample math calculations.</p> <p>This module allows the user to make mathematical calculations.</p> <p>Classes:</p> <ul> <li> <code>Two_numbers</code>           \u2013            <p>Several sample math calculations using two numbers.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>add</code>             \u2013              <p>Compute and return the sum of two numbers.</p> </li> <li> <code>subtract</code>             \u2013              <p>Calculate the difference of two numbers.</p> </li> <li> <code>multiply</code>             \u2013              <p>Compute and return the product of two numbers.</p> </li> <li> <code>divide</code>             \u2013              <p>Compute and return the quotient of two numbers.</p> </li> </ul>"},{"location":"API/calculations/#sandbox.calculations-classes","title":"Classes","text":""},{"location":"API/calculations/#sandbox.calculations.Two_numbers","title":"<code>Two_numbers(first, second)</code>","text":"<p>Several sample math calculations using two numbers.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; from sandbox.calculations import Two_numbers\n&gt;&gt;&gt; nums = Two_numbers(4, 2)\n&gt;&gt;&gt; print(f'{nums.add()=}')\nnums.add()=6.0\n</code></pre> <p>Parameters:</p> <ul> <li> <code>first</code>               (<code>Union[float, int]</code>)           \u2013            <p>the first number </p> </li> <li> <code>second</code>               (<code>Union[float, int]</code>)           \u2013            <p>the second number</p> </li> </ul> <p>Methods:</p> <ul> <li> <code>add</code>             \u2013              <p>Add my two numbers, and if additional numbers are provided, add them to the sum.</p> </li> <li> <code>subtract</code>             \u2013              <p>Subtract my two numbers.</p> </li> <li> <code>multiply</code>             \u2013              <p>Multiply my two numbers.</p> </li> <li> <code>divide</code>             \u2013              <p>Divide my two numbers.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>first</code>               (<code>Union[float, int]</code>)           \u2013            <p>The first number.</p> </li> <li> <code>second</code>           \u2013            <p>The second number.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def __init__(self, first: Union[float, int], second: Union[float, int]):\n    \"\"\"Initiate my number.\n\n    Args:\n        first: the first number \n        second: the second number  \n    \"\"\"\n    self.first: Union[float, int]= first\n    \"\"\"The first number.\"\"\"\n    self.second = second\n    \"\"\"The second number.\"\"\"\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers-attributes","title":"Attributes","text":""},{"location":"API/calculations/#sandbox.calculations.Two_numbers.first","title":"<code>first: Union[float, int] = first</code>  <code>instance-attribute</code>","text":"<p>The first number.</p>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers.second","title":"<code>second = second</code>  <code>instance-attribute</code>","text":"<p>The second number.</p>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers-functions","title":"Functions","text":""},{"location":"API/calculations/#sandbox.calculations.Two_numbers.add","title":"<code>add(*args)</code>","text":"<p>Add my two numbers, and if additional numbers are provided, add them to the sum.</p> <p>Returns:</p> <ul> <li> <code>Union[float, int]</code>           \u2013            <p>A number representing the arithmetic of all the numbers.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def add(self, *args) -&gt; Union[float, int]:\n    \"\"\"Add my two numbers, and if additional numbers are provided, add them to the sum.\n\n    Returns:\n        A number representing the arithmetic of all the numbers.\n    \"\"\"\n    if len(args) &gt; 0:\n        return sum(args) + add(self.first, self.second)\n    return add(self.first, self.second)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers.subtract","title":"<code>subtract()</code>","text":"<p>Subtract my two numbers.</p> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def subtract(self) -&gt; Union[float, int]:\n    \"\"\"Subtract my two numbers.\"\"\"\n    return subtract(self.first, self.second)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers.multiply","title":"<code>multiply()</code>","text":"<p>Multiply my two numbers.</p> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def multiply(self) -&gt; Union[float, int]:\n    \"\"\"Multiply my two numbers.\"\"\"\n    return multiply(self.first, self.second)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.Two_numbers.divide","title":"<code>divide()</code>","text":"<p>Divide my two numbers.</p> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def divide(self) -&gt; Union[float, int]:\n    \"\"\"Divide my two numbers.\"\"\"\n    return divide(self.first, self.second)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations-functions","title":"Functions","text":""},{"location":"API/calculations/#sandbox.calculations.add","title":"<code>add(a, b)</code>","text":"<p>Compute and return the sum of two numbers.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; add(4.0, 2.0)\n6.0\n&gt;&gt;&gt; add(4, 2)\n6.0\n</code></pre> <p>Parameters:</p> <ul> <li> <code>a</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the first addend in the addition.</p> </li> <li> <code>b</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the second addend in the addition.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>A number representing the arithmetic sum of <code>a</code> and <code>b</code>.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def add(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the sum of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; add(4.0, 2.0)\n        6.0\n        &gt;&gt;&gt; add(4, 2)\n        6.0\n\n    Args:\n        a: A number representing the first addend in the addition.\n        b: A number representing the second addend in the addition.\n\n    Returns:\n        A number representing the arithmetic sum of `a` and `b`.\n    \"\"\"\n    return float(a + b)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.subtract","title":"<code>subtract(a, b)</code>","text":"<p>Calculate the difference of two numbers.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; subtract(4.0, 2.0)\n2.0\n&gt;&gt;&gt; subtract(4, 2)\n2.0\n</code></pre> <p>Parameters:</p> <ul> <li> <code>a</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the minuend in the subtraction.</p> </li> <li> <code>b</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the subtrahend in the subtraction.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>A number representing the difference between <code>a</code> and <code>b</code>.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def subtract(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Calculate the difference of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; subtract(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; subtract(4, 2)\n        2.0\n\n    Args:\n        a: A number representing the minuend in the subtraction.\n        b: A number representing the subtrahend in the subtraction.\n\n    Returns:\n        A number representing the difference between `a` and `b`.\n    \"\"\"\n    return float(a - b)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.multiply","title":"<code>multiply(a, b)</code>","text":"<p>Compute and return the product of two numbers.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; multiply(4.0, 2.0)\n8.0\n&gt;&gt;&gt; multiply(4, 2)\n8.0\n</code></pre> <p>Parameters:</p> <ul> <li> <code>a</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the multiplicand in the multiplication.</p> </li> <li> <code>b</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the multiplier in the multiplication.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>A number representing the product of <code>a</code> and <code>b</code>.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def multiply(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the product of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; multiply(4.0, 2.0)\n        8.0\n        &gt;&gt;&gt; multiply(4, 2)\n        8.0\n\n    Args:\n        a: A number representing the multiplicand in the multiplication.\n        b: A number representing the multiplier in the multiplication.\n\n    Returns:\n        A number representing the product of `a` and `b`.\n    \"\"\"\n    return float(a * b)\n</code></pre>"},{"location":"API/calculations/#sandbox.calculations.divide","title":"<code>divide(a, b)</code>","text":"<p>Compute and return the quotient of two numbers.</p> <p>Examples:</p> Python Console Session<pre><code>&gt;&gt;&gt; divide(4.0, 2.0)\n2.0\n&gt;&gt;&gt; divide(4, 2)\n2.0\n&gt;&gt;&gt; divide(4, 0)\nTraceback (most recent call last):\n...\nZeroDivisionError: division by zero\n</code></pre> <p>Parameters:</p> <ul> <li> <code>a</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the dividend in the division.</p> </li> <li> <code>b</code>               (<code>Union[float, int]</code>)           \u2013            <p>A number representing the divisor in the division.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float</code>           \u2013            <p>A number representing the quotient of <code>a</code> and <code>b</code>.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ZeroDivisionError</code>             \u2013            <p>An error occurs when the divisor is <code>0</code>.</p> </li> </ul> Source code in <code>sandbox\\calculations.py</code> Python<pre><code>def divide(a: Union[float, int], b: Union[float, int]) -&gt; float:\n    \"\"\"Compute and return the quotient of two numbers.\n\n    Examples:\n        &gt;&gt;&gt; divide(4.0, 2.0)\n        2.0\n        &gt;&gt;&gt; divide(4, 2)\n        2.0\n        &gt;&gt;&gt; divide(4, 0)\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: division by zero\n\n    Args:\n        a: A number representing the dividend in the division.\n        b: A number representing the divisor in the division.\n\n    Returns:\n        A number representing the quotient of `a` and `b`.\n\n    Raises:\n        ZeroDivisionError: An error occurs when the divisor is `0`.\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return float(a / b)\n</code></pre>"},{"location":"API/prints/","title":"Prints","text":""},{"location":"API/prints/#sandbox.prints","title":"<code>sandbox.prints</code>","text":"<p>Classes:</p> <ul> <li> <code>Printer</code>           \u2013            </li> </ul> <p>Functions:</p> <ul> <li> <code>function_print</code>             \u2013              </li> </ul>"},{"location":"API/prints/#sandbox.prints-classes","title":"Classes","text":""},{"location":"API/prints/#sandbox.prints.Printer","title":"<code>Printer</code>","text":"<p>Methods:</p> <ul> <li> <code>print_me</code>             \u2013              </li> </ul>"},{"location":"API/prints/#sandbox.prints.Printer-functions","title":"Functions","text":""},{"location":"API/prints/#sandbox.prints.Printer.print_me","title":"<code>print_me()</code>","text":"Source code in <code>sandbox\\prints.py</code> Python<pre><code>def print_me(self):\n    print(\"Hello World from a class\")\n</code></pre>"},{"location":"API/prints/#sandbox.prints-functions","title":"Functions","text":""},{"location":"API/prints/#sandbox.prints.function_print","title":"<code>function_print()</code>","text":"Source code in <code>sandbox\\prints.py</code> Python<pre><code>def function_print():\n    print(\"Hello World from a function\")\n</code></pre>"},{"location":"API/sandbox/","title":"Sandbox","text":""},{"location":"API/sandbox/#sandbox.sandbox","title":"<code>sandbox.sandbox</code>","text":"<p>Module for testing anything.</p> <p>Functions:</p> <ul> <li> <code>hello</code>             \u2013              <p>Print a hello message.</p> </li> </ul>"},{"location":"API/sandbox/#sandbox.sandbox-functions","title":"Functions","text":""},{"location":"API/sandbox/#sandbox.sandbox.hello","title":"<code>hello()</code>","text":"<p>Print a hello message.</p> Source code in <code>sandbox\\sandbox.py</code> Python<pre><code>def hello():\n    \"\"\" \n    Print a hello message.\n    \"\"\"\n    print(\"hello\")\n</code></pre>"},{"location":"Playground/","title":"Some samples of formatting","text":"<ul> <li>code execution</li> <li>formatting</li> <li>GitHub actions</li> <li>links</li> <li>pyodide</li> </ul> <p>This page generates on the fly the links above using this markdown code: </p> Markdown<pre><code>```python exec='1'\nfrom pathlib import Path\npath =  Path('_file_').parent\n\nfor p in (path / 'docs'/ 'Playground').iterdir():\n    if  p.stem == 'index':\n        continue\n    print(f'- [{p.stem }]({p.stem })')\n```\n</code></pre>"},{"location":"Playground/GitHub%20actions/","title":"GitHub actions","text":"<p>With GitHub Actions, you can deploy the documentation site each time changes are pushed to the remote repository.</p> <p>Create a file in <code>.github\\workflows\\ci.yaml</code> (in your local repository) with the following text, then commit and push the changes.</p> ci.yaml ci.yaml<pre><code>name: ci \non:\n  push:\n    branches:\n      # - master \n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Configure Git Credentials\n        run: |\n          git config user.name github-actions[bot]\n          git config user.email 41898282+github-actions[bot]@users.noreply.github.com\n      - uses: actions/setup-python@v5\n        with:\n          python-version: 3.x\n      - run: echo \"cache_id=$(date --utc '+%V')\" &gt;&gt; $GITHUB_ENV \n      - uses: actions/cache@v4\n        with:\n          key: mkdocs-material-${{ env.cache_id }}\n          path: .cache\n          restore-keys: |\n            mkdocs-material-\n      - run: pip install mkdocs-material \n      - run: pip install mkdocstrings-python\n      - run: pip install markdown-exec[ansi]\n      - run: pip install mkdocs-open-in-new-tab\n      - run: pip install git+https://github.com/lennon-c/SandBox_Mkdocs.git\n      - run: mkdocs gh-deploy --force\n</code></pre>"},{"location":"Playground/GitHub%20actions/#with-code-execution-markdown-exec","title":"With Code Execution (markdown-exec)","text":"<p>To execute code importing your own package, or any package hosted on GitHub, you first need to add the instruction to install it:</p> ci.yaml<pre><code>          - run: pip install git+https://github.com/user/package.git\n</code></pre> <p>For this example, I used: <code>run: pip install git+https://github.com/lennon-c/SandBox_Mkdocs.git</code>.</p>"},{"location":"Playground/GitHub%20actions/#problems","title":"Problems","text":"<ul> <li> <p>If your executed code fetches data that is not contained in the package but resides only on your computer, the code will break during deployment.</p> <ul> <li>By contrast, if you deploy manually (e.g., using <code>mkdocs gh-deploy</code>), the code will still work.</li> </ul> </li> <li> <p>This could be problematic if the data is large, or if you do not want to load it or make it publicly available.</p> </li> </ul>"},{"location":"Playground/code%20execution/","title":"Code execution","text":"<p>This can be used for either automation (executing code without showing source code) or tutorials (executing and displaying both results and source code).</p> <p>To use this feature, you need to install <code>markdown-exec</code>. See the documentation for more information.</p>"},{"location":"Playground/code%20execution/#showing-source-code-and-results","title":"Showing Source Code and Results","text":""},{"location":"Playground/code%20execution/#tabbed","title":"tabbed","text":"<p>SourceResult Python<pre><code>import os \nprint('cwd',os.getcwd())\n</code></pre> Python Console Session<pre><code>cwd D:\\Dropbox\\Python\\SandBox\\Mkdocs\\SandBox\n</code></pre>  which was generated by using the markdown code: </p> Markdown<pre><code>```python exec=\"true\" source=\"tabbed-left\" result=\"pycon\"\nimport os, sys \nprint('cwd',os.getcwd())\n```\n</code></pre>"},{"location":"Playground/code%20execution/#source-code-above","title":"Source Code <code>above</code>","text":"Python<pre><code>import os\nprint(os.getcwd())\n</code></pre> Python Console Session<pre><code>D:\\Dropbox\\Python\\SandBox\\Mkdocs\\SandBox\n</code></pre> <p>which was run using:  Markdown<pre><code>```python exec=\"true\" source=\"above\" result=\"pycon\"\nimport os\nprint(os.getcwd())\n```\n</code></pre></p>"},{"location":"Playground/code%20execution/#running-own-hosted-module-in-github","title":"Running Own Hosted Module in GitHub","text":"<p>This is really cool! With <code>markdown-exec</code>, you can showcase your own projects hosted on GitHub or insert examples into docstrings, such as the class <code>Two_numbers</code>.</p> <p>Here, a Python script imports a class from this project module: <code>sandbox.calculations.Two_numbers</code>.</p> SourceResult Python<pre><code>from sandbox.calculations import Two_numbers\n\nnums = Two_numbers(4, 2)\nprint(f'{nums.add()=}')\n</code></pre> Python Console Session<pre><code>nums.add()=6.0\n</code></pre> <p>which was run using this markdown code:</p> Markdown<pre><code>```python exec=\"true\" source=\"tabbed-left\" result=\"pycon\"  \nfrom sandbox.calculations import Two_numbers\n\nnums = Two_numbers(4, 2)\nprint(f'{nums.add()=}')\n```\n</code></pre>"},{"location":"Playground/code%20execution/#using-mkdocs-gh-deploy-manually","title":"Using <code>mkdocs gh-deploy</code> Manually","text":"<ul> <li>With Poetry, this works out of the box.</li> <li>This option uses your local environment, including dependencies and PYTHONPATH.</li> <li>Note: This has not been tested without Poetry. You will likely need to install the package in your environment first.</li> </ul>"},{"location":"Playground/code%20execution/#using-github-actions","title":"Using GitHub actions","text":"<ul> <li>After pushing changes to the remote repo and prior to deployment, a new environment will be created. In addition to the MkDocs-related dependencies, you should also include the dependencies required to execute your package's code examples.</li> </ul> <p>For this example:</p> <ul> <li>I modified the <code>ci.yml</code> file for GitHub workflows to enable package installation during deployment.  </li> </ul> ci.yml<pre><code>    - run: pip install git+https://github.com/lennon-c/SandBox_Mkdocs.git\n</code></pre> <ul> <li>This means that an installation of your own package is required.</li> <li>Since I'm using Poetry, I only needed to add the necessary documentation for packaging, and a package wheel was not required.</li> </ul>"},{"location":"Playground/code%20execution/#prints","title":"Prints","text":"<p>Sadly, it cannot capture prints from imported code.</p> <p>Nothing will be printed in the following two blocks.</p> SourceResult Python<pre><code>from sandbox.prints import Printer \nprinter = Printer()\nprinter.print_me()\n</code></pre> Python Console Session<pre><code>\n</code></pre> SourceResult Python<pre><code>from sandbox.prints import function_print\nfunction_print()\n</code></pre> Python Console Session<pre><code>\n</code></pre> <p>It is only able to see prints from functions created in the current session, as in the following code: </p> SourceResult Python<pre><code>def print_from_script():\n    print(\"print from the script\")\n\nprint_from_script()\n</code></pre> Python Console Session<pre><code>print from the script\n</code></pre>"},{"location":"Playground/formatting/","title":"Formatting","text":""},{"location":"Playground/formatting/#code-blocks","title":"code blocks","text":"<p>Plain code block Python<pre><code>import sys \n\nfor path in sys.path:\n    print(path)\n</code></pre></p>"},{"location":"Playground/formatting/#admonition-or-callout","title":"admonition or callout","text":"<p>see the documentation.</p> <p>This is the admonition title of a <code>note</code></p> <p>body </p> Markdown<pre><code>!!! note \"This is the admonition title of a `note`\"\n    body \n</code></pre> <p>this is a <code>info</code> admonition</p> <p>This is the admonition body</p> Markdown<pre><code>!!! info \"this is a `info` admonition\"\n    This is the admonition body\n</code></pre> collapsable admonition - closed by default <p>you can close me.</p> Markdown<pre><code>??? note \"collapsable admonition - closed by default\"\n    you can close me.\n</code></pre> collapsable admonition - opened by default <p>you can close me.</p> Markdown<pre><code>???+ note \"collapsable admonition - opened by default\"\n    you can close me.\n</code></pre>"},{"location":"Playground/formatting/#grid-cards","title":"grid cards","text":"<p>see docs</p> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <p>Run using: Markdown<pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n- :fontawesome-brands-html5: __HTML__ for content and structure\n- :fontawesome-brands-js: __JavaScript__ for interactivity\n- :fontawesome-brands-css3: __CSS__ for text running out of boxes\n- :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre> Cards are not displayed in vscode editor, nor Obsidian. </p>"},{"location":"Playground/formatting/#linenums","title":"linenums","text":"<p>For showing line numbers in code and for highlighting code lines.</p> <p>See docs</p> Python<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Rendered from this code:</p> Markdown<pre><code>``` py linenums=\"1\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> Python<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>Rendered from this code:</p> Markdown<pre><code>``` py hl_lines=\"2 3\"\ndef bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n```\n</code></pre> <p>Lines colors and numbers are not rendered in editor/obsidian.</p>"},{"location":"Playground/formatting/#tabbed","title":"tabbed","text":"<p>see docs</p> SourceResult Python<pre><code>from sandbox.calculations import Two_numbers\n\nnums = Two_numbers(4, 2)\nprint(f'{nums.add()=}')\n</code></pre> Text Only<pre><code>nums.add()=6.0\n</code></pre> <p>rendered from this markdown code: Markdown<pre><code>=== \"Source\"\n\n    ```python \n    from sandbox.calculations import Two_numbers\n\n    nums = Two_numbers(4, 2)\n    print(f'{nums.add()=}')\n    ```\n\n=== \"Result\"\n\n    ```\n    nums.add()=6.0\n    ```\n</code></pre></p>"},{"location":"Playground/links/","title":"Playing with links","text":"<p>Linking things can be tricky...</p>"},{"location":"Playground/links/#linking-other-pages-in-the-project","title":"Linking Other Pages in the Project","text":"<p>It is recommended to use relative paths when linking to other pages in the project. The paths should be relative to the location of the current file containing the link and should point to <code>.md</code> files.</p> <p>For instance: </p> <p>Go to Home Page</p> Markdown<pre><code>Go to [Home Page](../README.md)\n</code></pre>"},{"location":"Playground/links/#links-in-the-readmemd-file","title":"Links in the <code>README.md</code> File","text":"<p>I do not use an <code>index.md</code> file as the entry point for the website. Instead, I use a <code>README.md</code> file, which serves both as the homepage of the site and as the documentation on GitHub, reducing boilerplate.</p> <p>However, this approach has the following drawback:</p> <ul> <li>Links using relative paths will not work when the <code>README.md</code> file is accessed directly on GitHub.<ul> <li>To address this, use external links with a URL address in production.</li> </ul> </li> </ul> <p>Go to Home Page</p> Markdown<pre><code>Go to [Home Page](https://lennon-c.github.io/SandBox_Mkdocs/)\n</code></pre>"},{"location":"Playground/links/#link-to-a-docstring-object","title":"Link to a Docstring Object:","text":"<p>Here, one uses square brackets and employs dot notation to link to objects within the package.</p> <p>link to class <code>sandbox.calculations.Two_numbers</code></p> <ul> <li>link to class</li> </ul> Markdown<pre><code>- [link to class][sandbox.calculations.Two_numbers]\n</code></pre>"},{"location":"Playground/pyodide/","title":"Pyodide","text":"<p>This allows for interactive Python execution. To use it, you need to install <code>markdown-exec</code>. See the documentation for more information.</p> <p>It is very cool, but it has several limitations:</p> <ul> <li>While it should work well for most built-in Python modules, it does not support all of them. For instance, there is no support for <code>tkinter</code>!</li> <li>You can install packages from PyPi, but only pure Python modules are supported.</li> <li>There is support for some non-pure Python packages, such as <code>numpy</code>.</li> </ul> <p> Editor (session: default) Run <pre>import os, sys \nprint('cwd',os.getcwd())\n\nfor path in sys.path:\n    print(path)</pre> Output Clear <pre><code></code></pre> </p> <p>which was run using:  Markdown<pre><code>```pyodide\nimport os, sys \nprint('cwd',os.getcwd())\n\nfor path in sys.path:\n    print(path)\n```\n</code></pre></p>"},{"location":"Playground/pyodide/#packages-of-project-hosted-in-github","title":"Packages of Project Hosted in GitHub","text":"<p>This will not work, pyodide cannot access your documentation, nor the installs at deployment.</p> <p> Editor (session: default) Run <pre>from sandbox.calculations import Two_numbers\n\nnums = Two_numbers(4, 2)\nprint(f'{nums.add()=}')</pre> Output Clear <pre></pre> </p> <p>This is a not very elegant solution, but it works:</p> <p> Editor (session: default) Run <pre>\nfrom pyodide_importer import register_hook\nregister_hook(\"https://raw.githubusercontent.com/lennon-c/SandBox_Mkdocs/main/\")\n\nfrom sandbox.calculations import Two_numbers\n\nnums = Two_numbers(4, 2)\nprint(f'{nums.add()=}')\n</pre> Output Clear <pre></pre> </p>"}]}